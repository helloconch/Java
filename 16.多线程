1.线程和进程
几乎所有的操作系统都支持进程的概念，所有运行中的任务通常对应一个进程（process）。当一个程序进入内存运行时，即可变成一个进程。
进程是处于运行过程中的程序，并且具有一定的独立功能，进程是系统进行资源分配和调度的一个独立单元。
进程有如下三个特征
a)独立性：进程是系统独立存在的实体，它可以拥有自己独立的资源，每一个进程都拥有自己私有的地址空间。在没有经过进程本身允许的情况，
一个用户进程不可以直接访问其他进程的地址空间。
b)动态性：进程与程序的区别在于，程序只是一个静态的指令集合，而进程是一个正在系统中活动的指令集合。在进程中加入了时间的概念。进程具有自己
的生周期和各种不同的状态，这些概念在程序中都是不具备的。
c)多个进程可以在单个处理器上并发进行，多个进程之间不会互相影响。

多线程扩展了多进程的概念，使得同一个进程可以同时并发处理多个任务。线程 也被称作轻量级进程，线程是进程的执行单元。就像进程在操作系统的地位
一样，线程在程序中是独立的，并发的执行流。当进程被初始化后，主线程就被创建了。对于绝大多数的应用程序来说，通常仅要求有一个主线程，但也可以
在该进程内创建多条顺序执行流，这些顺序执行流就是线程，每个线程也是互相独立的。

2.多线程编程优点
a)进程之间不能共享内存，但线程之间共享内存非常容易。
b)系统创建进程时需要为该进程重新分配系统资源，但创建线程则代价小的多，因此使用多线程来实现多任务并发比多进程的效率高。
c)Java语言内置了多线程功能支持，而不是单纯地作为底层操作系统的调度方式，从而简化Java多线程的编程。

3.线程的创建和启动
a)继承Thread类创建线程类【使用继承Thread类方法来创建线程类时，多个线程之间无法共享线程类的实例变量。】
Thread.currentThread():currentThread()是Thread类的静态方法，该方法总是返回当前正在执行的线程对象。
getName()：该方法是Thread类的实例方法，该方法返回调用该方法的线程名字。
b)实现Runnable接口创建线程类【采用Runnable接口的方式创建的多个线程可以共享线程类的实例变量这是因为在这种方式下，
程序所创建的Runnable对象只是线程的target，而多个线程可以共享一个target，所以多个线程可以共享同一个线程类的实例变量】
c)使用Callable和Future创建线程
Java5开始，Java提供Callable接口，该接口怎么看像是Runnable接口的增强版，Callable接口提供了一个call（）方法可以作为线程执行体，
但call()方法比run()方法功能更强大。
call()方法可以有返回值
call()方法可以声明抛出异常。
public class Thread1 implements Callable<Integer> {

	@Override
	public Integer call() throws Exception {

		int i = 0;
		for (; i < 100; i++) {
			System.out.println(Thread.currentThread().getName() + " 的循环变量i:"
					+ i);
		}
		return i;
	}

}
public static void main(String[] args) {
		Thread1 t1 = new Thread1();
		FutureTask<Integer> ft = new FutureTask<Integer>(t1);

		for (int i = 0; i < 100; i++) {
			System.out.println(Thread.currentThread().getName() + " 的循环变量i:"
					+ i);

			if (i == 20) {
				new Thread(ft, "有返回的线程").start();
			}
		}

		try {
			System.out.println("获取子线程的返回值: " + ft.get());
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ExecutionException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}


4.创建线程三种方式对比
采用实现Runnable、Callable接口的方式创建多线程的优缺点：
a)线程类只是实现了Runnable接口或Callable接口，还可以继承其他类。
b)在这种方式下，多个线程可以共享一个target对象，所以非常适合多个相同线程来处理同一份资源的情况，
从而可以将CPU、代码和数据分开，形成清晰的模型，较好的体现面向对象的思想。
劣势是，编程稍稍复杂，如果需要访问当前线程，则必须使用Thread.currentThread()方法。
c)采用继承Thread类方式创建多线程的优缺点：
劣势是，因为线程类继承了Thread类，所以不饿能够再继承其他父类。
优势是，编写简单，如果需要访问当前线程，则无须使用Thread.currentThread()方法，直接使用
this即可获得当前线程。
因此一般推荐采用Runnable接口、Callable接口方式创建多线程。


5.线程的生命周期
a)新建（new）
当程序使用new创建一个线程之后，该线程处于新建状态，仅仅由Java虚拟机分配内存
，并初始化其成员变量的值。此时线程对象没有表现出任何线程的动态特征，
程序也不会执行线程的执行体。
b)就绪（runnable）
线程对象调用start()方法之后，该线程处于就绪状态，Java虚拟机会为其
创建方法调用栈和程序计数器，处于这个状态的线程并没有开始运行，
只是表示该线程可以运行了，至于该线程是否开始运行，取决于
JVM里线程调度器的调度。
【如果希望调用子线的start()方法后，子线程立即开始执行，程序可以使用
Thread.sleep(1)来让当前运行的线程（主线程）睡眠1毫秒，因为在这
1毫秒内CPU不会空闲，它会去执行另一个处于就绪状态的线程，这样可以让子线程立即开始执行。】
c)运行（running）
d)阻塞（blocked）
当发生如下情况，线程将会进入阻塞状态
d1)调用sleep（）方法主动放弃所占用的处理器资源。
d2)调用了一个阻塞时IO方法，在该方法返回之前，该线程被阻塞。
d3)线程试图获得一个同步监视器，但该同步监视器正被其它线程所持有。
d4)线程在等待某个通知(notify)。
d5)程序调用了线程的suspend()方法将该线程挂起。但该方法容易导致死锁，所以尽量避免使用该方法。
当发生如下特定情况，可以解除上面的阻塞，让线程重新进入就绪状态。
d11)sleep()方法线程经过了指定时间。
d22)线程调用的阻塞IO方法已经返回。
d33)线程成功获得了试图取得的同步监视器。
d44)线程正在等待某个通知时，其他线程发出了一个通知。
d55)处于挂起状态的线程被调用了resume（）恢复方法。
e)死亡(dead)
线程会以如下三种方式结束，结束后就处于死亡状态。
e1)run()或call()方法执行完成，线程正常结束。
e2)线程抛出一个未捕获的Exception或Error。
e3)直接调用该线程stop()方法来结束该线程-该方法容易导致死锁，不推荐使用。
【当主线程结束时，其他线程不受任何影响，并不会随之结束，一旦线程启动起来后，它就拥有主线程相同的地位，它不会受主线程影响。】

![image](16_thread.png)

6.控制线程
a)join线程
当在某个程序执行流中调用其他线程的join（）方法时，调用线程将被阻塞【例如主线程调用了某个子线程的join()方法，主线程被阻塞】，
直到被join()线程执行完为止。
b)后台线程
有一种线程，它是在后台运行的，它的任务是为其它线程提供服务，这种线程被称为后台线程（Daemon Thread）,又称为守护线程或精灵线程，
JVM的垃圾回收线程就是典型额后台线程。
后台线程有个特征，如果所有的前台线程都死亡，后台线程会自动死亡。
调用Thread对象的setDaemon(true)方法可以将指定的线程设置成后台线程，然后进行start()操作
主线程默认是前台线程，并不是所有的线程默认都是前台线程，有些线程默认就是后台线程，前台线程创建的子线程默认是前台线程，
后台线程创建的子线程默认是后台线程。
c)线程睡眠sleep
让当前正在执行的线程暂停一段时间，并进入阻塞状态。
d)线程让步yield
让当前正在执行的线程暂停，但不会阻塞该线程，它只是将该线程转入就绪状态。yield（）只是让当前线程暂停一下，让系统的线程调度器重新调度一次，
完全可能情况是，当某个线程调用了yield（）方法暂停之后，线程调度器又将其调度出来重新执行。
实际上，当某个线程调用yield()方法暂停之后，只有优先级与当前线程相同，或者优先级比当前线程更高的处于就绪状态的线程才会获得执行机会。



7.改变线程优先级
每个线程默认的优先级都与创建它的父线程优先级相同，在默认情况下，main线程具有普通优先级，由main线程创建的子线程也具有普通优先级。
Thread类提供setPriority(int newPriority) getPriority（）方法来设置和返回指定线程的优先级，范围1~10，也可以采用三个静态常量
MAX_PRIORITY:10
MIN_PRIORITY:1
NORM_PRIORITY:5


8.线程同步
a)同步代码块
//使用account作为同步监视器，任何线程进入下面同步代码块之前
//必须先获得对account账号的锁定，其他线程池无法获得锁，也就无法修改它
//这种做法符合“加锁-修改-释放锁”的逻辑
run(){
synchronized(account){
}
}
b)同步方法
public synchronized void draw(double drawAccount){
}


9.释放同步监视器的锁定
如下几种情况释放对同步监视器的锁定
a)当前线程的同步方法、同步代码块执行结束，当前线程即可释放不同监视器
b)当前线程在同步代码块、同步方法中遇到break、return终止了该代码块，该方法的继续执行，当前线程将释放同步监视器。
c)当前线程在同步代码块、同步方法中出现了未处理的Error或Exception，导致了该代码块，该方法异常结束时，当前线程将会释放同步监视器。
d)当前线程在同步代码块、同步方法中，程序执行了同步监视器对象的wait()方法，则当前线程暂停，并释放同步监视器。
以下情况，线程不会释放同步监视器
a)当前线程在同步代码块、同步方法时候，程序调用Thread.sleep() Thread.yield()方法来暂停当前线程的执行，当前线程不会释放同步监视器。
b)线程执行同步代码块时，其它线程调用了该线程的suspend()方法，将该线程挂起，该线程不会释放同步监视器。

10.同步锁（Lock）
Java5开始，Java提供一个功能更强大的线程同步机制，通过显示的定义同步锁对象来实现同步，在这种机制下，同步锁由Lock对象充当。
Lock提供比同步方法和同步代码块更广泛的锁定操作，Lock允许实现更灵活地结构，可以具有差别很大的属性，并且支持多个相关的Condition对象。
某些锁可以允许对共享资源的并发访问，如ReadWriteLock(读写锁)，Lock  。并为Lock提供了ReentrantLock(可重入锁)实现类，为ReadWriteLock提供了
ReentrantReadWriteLock实现类。
Java8新增了新型的StampedLock类，在大多数场景中它可以替代传统的ReentrantReadWriteLock。ReentrantReadWriteLock为读写操作提供了三种锁
模式:Writing、ReadingOptimistic、Reading.

class X {
	// 定义锁对象
	private final ReentrantLock lock = new ReentrantLock();

	// 定义需要保证线程安全的方法
	public void m() {
		// 加锁
		lock.lock();
		// 需要保证线程安全的代码
		try {
			// method body
		} finally {
			lock.unlock();
		}

	}
}



11.死锁
当两个线程相互等待对方释放不同监视器时就会发生死锁。一旦出现死锁，整个程序既不会发生任何异常，也不会给出任何提示，只是所有线程
处于阻塞状态，无法继续。


12.线程通信
a)传统的线程通信
系统存在2个线程，代表存款者和取钱者，现在有种要求，系统要求存和取不断重复，并且要求，当存款者将钱存入指定账户后，取钱人立即取出，
不允许存款者连续2次存钱，也不允许取钱者连续2次取钱。
为了实现这种功能，可以借助于Object类提供的wait(),notify和notifyAll()，这3个方法不属于Thread类，而是属于Object类。但这3个方法必须由
同步监视器对象调用，可以分成以下2个情况。
a1)对于使用synchronized修饰的同步方法，因为该类的默认实例(this)就是同步监视器，所以可以在同步方法中直接调用这3个方法。
a2)对于使用Synchronized修饰的同步代码块，同步监视器是synchronized后括号里的对象，所以必须使用该对象调用这3个方法。
wait()：导致当前线程等待，直到其他线程调用该同步监视器的notify（）或notifyAll（）方法来唤醒该线程。调用wait()方法的当前线程会释放对同步监视器的
的锁定。
notify()：唤醒在此同步监视器上等待的单个线程。如果所有线程都在此同步监视器上等待，则会选择唤醒其中一个线程。选择是任意性的。只有当前线程放弃
对该同步监视器的锁定后（使用wait()方法），才可以执行被唤醒的线程。
notifyAll():唤醒在此同步监视器上等待的所有线程。只有当前线程放弃对该同步监视器的锁定后，才可以执行被唤醒的线程。
package money;

public class Account {
	private String accountNo;
	private double balance;
	// 标示账户中是否已有存款标示
	private boolean flag = false;

	public Account() {
	}

	public Account(String accountNo, double balance) {
		super();
		this.accountNo = accountNo;
		this.balance = balance;
	}

	public String getAccountNo() {
		return accountNo;
	}

	public void setAccountNo(String accountNo) {
		this.accountNo = accountNo;
	}

	public double getBalance() {
		return balance;
	}

	public synchronized void draw(double drawAmount) {
		try {
			// flag=false，表明账户中还没有人存钱进去，取钱方法阻塞
			if (!flag) {
				wait();
			} else {
				System.out.println(Thread.currentThread().getName() + "取钱："
						+ drawAmount);
				balance -= drawAmount;
				System.out.println("账户余额为:" + balance);
				flag = false;
				// 唤醒其它线程
				notifyAll();
			}
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public synchronized void deposit(double depositAmount) {
		try {
			// flag=true，表示账户中已有人存钱进去，存钱方法阻塞
			if (flag) {
				wait();
			} else {
				// 执行存款操作
				System.out.println(Thread.currentThread().getName() + "存款："
						+ depositAmount);
				balance += depositAmount;
				System.out.println("账户余额为:" + balance);
				flag = true;
				// 唤醒其它线程
				notifyAll();
			}
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

}
package money;

public class DrawThread extends Thread {
	private Account account;
	private double drawAmount;

	public DrawThread(String name, Account account, double drawAmount) {
		super(name);
		this.account = account;
		this.drawAmount = drawAmount;
	}

	@Override
	public void run() {
		for (int i = 0; i < 100; i++) {
			account.draw(drawAmount);
		}
	}

}
package money;

public class DepositThread extends Thread {
	private Account account;
	private double depositAmount;

	public DepositThread(String name, Account account, double depositAmount) {
		super(name);
		this.account = account;
		this.depositAmount = depositAmount;
	}

	@Override
	public void run() {
		for (int i = 0; i < 100; i++) {
			account.deposit(depositAmount);
		}
	}
}
package money;

public class Run {
	public static void main(String[] args) {
		// 创建一个账户
		Account account = new Account("11111111", 0);
		new DrawThread("取钱者", account, 800).start();
		new DepositThread("存款者甲", account, 800).start();
		new DepositThread("存款者乙", account, 800).start();
		new DepositThread("存款者丙", account, 800).start();
	}

}


b)使用Condition控制线程通信
如果程序不适用synchronized关键字来保证同步，而是直接适用Lock对象来保证同步，则系统中不存在隐士的同步监视器，也就不能适用
wait()、notify()、notifyAll()方法进行线程通信。
当适用Lock对象来保证同步时，Java提供了一个Condition类来保持协调。
await():
signal():
signalAll():
package condition;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class Account {
	// 显示定义Lock对象
	private final Lock lock = new ReentrantLock();
	// 获得指定Lock对象对应的Condition
	private final Condition cond = lock.newCondition();

	private String accountNo;
	private double balance;
	// 标示账户中是否已有存款标示
	private boolean flag = false;

	public Account() {
	}

	public Account(String accountNo, double balance) {
		super();
		this.accountNo = accountNo;
		this.balance = balance;
	}

	public String getAccountNo() {
		return accountNo;
	}

	public void setAccountNo(String accountNo) {
		this.accountNo = accountNo;
	}

	public double getBalance() {
		return balance;
	}

	public void draw(double drawAmount) {
		// 加锁
		lock.lock();
		try {
			// flag=false，表明账户中还没有人存钱进去，取钱方法阻塞
			if (!flag) {
				cond.await();
			} else {
				System.out.println(Thread.currentThread().getName() + "取钱："
						+ drawAmount);
				balance -= drawAmount;
				System.out.println("账户余额为:" + balance);
				flag = false;
				// 唤醒其它线程
				cond.signalAll();
			}
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			lock.unlock();
		}
	}

	public void deposit(double depositAmount) {
		lock.lock();
		try {
			// flag=true，表示账户中已有人存钱进去，存钱方法阻塞
			if (flag) {
				cond.await();
			} else {
				// 执行存款操作
				System.out.println(Thread.currentThread().getName() + "存款："
						+ depositAmount);
				balance += depositAmount;
				System.out.println("账户余额为:" + balance);
				flag = true;
				// 唤醒其它线程
				cond.signalAll();
			}
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			lock.unlock();
		}

	}

}
package condition;

public class DrawThread extends Thread {
	private Account account;
	private double drawAmount;

	public DrawThread(String name, Account account, double drawAmount) {
		super(name);
		this.account = account;
		this.drawAmount = drawAmount;
	}

	@Override
	public void run() {
		for (int i = 0; i < 100; i++) {
			account.draw(drawAmount);
		}
	}

}
package condition;

public class DepositThread extends Thread {
	private Account account;
	private double depositAmount;

	public DepositThread(String name, Account account, double depositAmount) {
		super(name);
		this.account = account;
		this.depositAmount = depositAmount;
	}

	@Override
	public void run() {
		for (int i = 0; i < 100; i++) {
			account.deposit(depositAmount);
		}
	}
}
package condition;

public class Run {
	public static void main(String[] args) {
		// 创建一个账户
		Account account = new Account("11111111", 0);
		new DrawThread("取钱者", account, 800).start();
		new DepositThread("存款者甲", account, 800).start();
		new DepositThread("存款者乙", account, 800).start();
		new DepositThread("存款者丙", account, 800).start();
	}

}


c.适用阻塞队列（BlockingQueue）控制线程通信
java5提供了一个BlockingQueue接口，虽然BlockingQueue也是Queue的子接口，但它的主要用途并不是作为容器，而是作为线程同步的工具。
BlockingQueue具有一个特征，当生产者线程试图向BlockingQueue中放入元素时，如果该队列已满，则该线程被阻塞；当消费者试图从BlockingQueue
中取出元素时，如果该队列已空，则该线程被阻塞。
BlockingQueue提供如下两个支持阻塞的方法
put(E e)：尝试把E元素放入BlockingQueue中，如果该队列元素已满，则阻塞该线程。
take():尝试从BlockingQueue的头部取出元素，如果该队列的元素已空，则阻塞该线程。
BlockingQueue继承了Queue接口，当然也可以使用Queue接口中的方法。
在队列尾部插入元素。包括add(E e)、offer(E e)、put(E e)方法，该队列已满，这三个方法分别抛出异常，返回false，阻塞队列。
在队列头部删除并返回删除的元素。包括remove()、poll()、take()方法。当队列已空时，这三个方法分别抛出异常，返回false,阻塞队列。
在队列头部取出但不删除元素，包括element()和peek()方法，当队列已空时，这2个方法分别抛出异常，返回false
package blockingqueue;

import java.util.concurrent.BlockingQueue;

public class Producer extends Thread {
	private BlockingQueue<String> bq;

	public Producer(BlockingQueue<String> bq) {
		super();
		this.bq = bq;
	}

	@Override
	public void run() {
		String[] strArr = new String[] { "Java", "Struts", "Spring" };

		for (int i = 0; i < 999999999; i++) {
			System.out.println(getName() + "生产者准备生产集合元素!");

			try {
				Thread.sleep(200);
				// 尝试放入元素，如果队列已满，则线程被阻塞
				bq.put(strArr[i % 3]);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			System.out.println(getName() + "生产完成:" + bq);

		}
	}
}
package blockingqueue;

import java.util.concurrent.BlockingQueue;

public class Consumer extends Thread {
	private BlockingQueue<String> bq;

	public Consumer(BlockingQueue<String> bq) {
		super();
		this.bq = bq;
	}

	@Override
	public void run() {

		while (true) {
			System.out.println(getName() + "消费者准备消费集合元素!");

			try {
				Thread.sleep(200);
				// 尝试取出元素，如果队列已空，则线程被阻塞
				bq.take();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			System.out.println(getName() + "消费完成:" + bq);
		}
	}
}
package blockingqueue;

import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

public class Run {
	public static void main(String[] args) {
		// 创建一个容量为1的BlockingQueue
		BlockingQueue<String> bq = new ArrayBlockingQueue<String>(1);
		// 启动3个生产者线程
		new Producer(bq).start();
		new Producer(bq).start();
		new Producer(bq).start();
		// 启动一个消费者线程
		new Consumer(bq).start();
	}

}


13.线程组和未处理的异常
package exception;

import java.lang.Thread.UncaughtExceptionHandler;

public class MyExHandler implements UncaughtExceptionHandler {

	@Override
	public void uncaughtException(Thread t, Throwable e) {
		System.out.println(t + " 线程出现了异常: " + e);
	}

}
package exception;

public class ExHandler {

	public static void main(String[] args) {
		// 设置主线程的异常处理器
		Thread.currentThread().setUncaughtExceptionHandler(new MyExHandler());
		int a = 5 / 0;
		System.out.println("程序正常结束!");
	}

}


14.线程池
系统启动一个新线程的成本是比较高的，因为它涉及与操作系统交互，在这种情形下，使用线程池可以很好的提高性能，
尤其是当程序中需要创建大量生存期很短暂的线程时，更应该考虑使用线程池。
s使用线程池可以有效控制系统中并发线程的数量，当系统中包含大量并发线程时，会导致系统性能剧烈下降，甚至导致JVM崩溃，而线程池的最大线程
数参数可以控制系统中并发线程数不超过此数。
从Java5开始，Java内建支持线程池。Java5新增了一个Executors工厂类来产生线程池，该工厂类包含如下几个静态方法来创建线程池。
a)newCachedThreadPool():创建一个具有缓存功能的线程池，系统根据需要创建线程，这些线程将会被缓存在线程池中。
b)newFixedThreadPool(int nThreads):创建一个可重用的，具有固定线程数的线程池。
c)newSigleThreadExecutor():创建一个只有单线程的线程池，它相当于调用newFixedThreadPool()方法传入参数1
d)newScheduledThreadPool(int corePoolSize):创建具有指定线程数的线程池，它可以在指定延迟后执行线程任务。corePoolSize指池中
所保存的线程数，即使线程是空闲的也被保存在线程池内。
e)newSigleThreadScheduledExecutor():创建只有一个线程的线程池，它可以在指定延迟后执行线程任务。
java8
f)ExecutorService newWorkStealingPool(int parallelism):创建持有足够的线程的线程池来支持给定的并行级别，该方法还会使用多个队列来减少竞争。
j)ExecutorService newWorkStealingPool():该方法是前一个方法的简化版，如果当前机器有4个CPU，则目标并行级别被设置为4，也就是相当于前一个
方法传入4作为参数。
package threadpool;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class ThreadPoolTest {
	public static void main(String[] args) {

		// 创建一个具有固定线程数的线程池
		ExecutorService pool = Executors.newFixedThreadPool(6);
		Runnable targert = new Runnable() {

			@Override
			public void run() {
				for (int i = 0; i < 100; i++) {
					System.out.println(Thread.currentThread().getName()
							+ " 的i值为:" + i);
				}

			}
		};

		// 向线程池中提交2个线程
		pool.submit(targert);
		pool.submit(targert);
		// 关闭线程池
		pool.shutdown();

	}
}



15.ForkJoinPool为多核CPU做准备

16.线程相关类
a)ThreadLocal类（Thread Local Variable）
它代表一个线程局部变量，通过把数据放在ThreadLocal中就可以让每一个线程创建一个该变量的副本，从而避免并发访问的线程安全问题。
package threadlocal;

public class Account {
	// 定义一个ThreadLocal类型变量，该变量将是一个线程局部变量,每个线程都会保留该变量的副本
	private ThreadLocal<String> name = new ThreadLocal<String>();

	public Account(String str) {
		this.name.set(str);
		System.out.println("---" + this.name.get());
	}

	public String getName() {
		return name.get();
	}

	public void setName(String str) {
		this.name.set(str);
	}
}
package threadlocal;

public class MyTest extends Thread {
	// 定义一个Account类型的成员变量
	private Account account;

	public MyTest(Account account, String name) {
		super(name);
		this.account = account;
	}

	@Override
	public void run() {
		for (int i = 0; i < 10; i++) {

			if (i == 6) {
				account.setName(getName());
			}

			System.out.println(account.getName() + " 账户i值：" + i);
		}
	}

}
package threadlocal;

public class ThreadLocalTest {
	public static void main(String[] args) {
		Account at = new Account("初始名");

		new MyTest(at, "线程甲").start();
		new MyTest(at, "线程乙").start();
	}
}

b)包装线程不安全的集合
java集合时所讲的ArrayList、LinkedList、HashSet、TreeSet、HashMap、TreeMap等都是线程不安全的，当多个并发线程向这些集合存取元素事，就
可能破坏这些集合的数据完整性。
通过Collecitons提供的synchronizedCollection()、synchronizedList()、synchronizedMap()、synchronizedSet()、synchronizedSortedMap()、
synchronizedSortedSet()

c)线程安全的集合类
java5开始，在java.util.concurrent包下提供大量支持高效并发访问的集合接口和实现类。
c1)以Concurrent开头的集合类，如ConcurrentHashMap等等
c2)以CopyOnWrite开头的集合类，如CopyOnWriteArrayList等
当多个线程共享访问一个公共集合时，ConcurrentLinkedQueue是一个恰当的选择，ConcurrentLinkedQueue不允许使用null元素，ConcurrentLinkedQueue
实现了多线程的高效访问，多个线程访问ConcurrentLinkedQueue集合无须等待。
在默认情况下ConcurrentHashMap支持16个线程并发写入，当有超过16个线程并发向该Map写入数据时，可能有一些线程需要等待。
CopyOnWriteArrayList执行写入操作时需要频繁地复制数组，性能比较差，但由于读操作与写操作不是同一个数组，而且读操作也不需要加锁，
因此读操作就很快，很安全。由此可见，CopyOnWriteArrayList适合用在读取操作远远大于写入操作的场景中，例如缓存等。

