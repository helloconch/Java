1.Java也支持面向对象的三大特征：封装、继承、多态。Java提供了private、protected、public三个访问控制修饰符来实现良好的封装
，提供了extends关键字来让子类继承父类，子类继承父类可以继承父类的成员变量和方法，如果访问控制允许，子类实例可以直接调用父类里定义的方法。
继承是实现类复用的重要手段，除此之外，也可以通过组合关系来实现这种复用，从某种程度上来看，继承和组合具有相同的功能。使用继承关系来实现
复用时，子类对象可以直接赋给父类变量，这个变量具有多态性，编程更加灵活，而利用组合关系实现复用时，则不具备这种灵活性。

构造器用于对类实例进行初始化操作，构造器支持重载，如果多个重载的构造器里包含了相同的初始化代码，则可以把这些初始化代码放置在
普通初始化块里完成，初始化块总在构造器执行之前被调用。除此之外，Java还提供了一种静态初始化块，静态初始化块用于初始化类，在类初始化
阶段被执行。如果继承树里的某一个类需要被初始化，系统将会同时初始化该类的所有父类。


2.堆heap[实例对象] 栈stack[对象引用变量或值类型]


3.private --default--protected--public
private(当前类访问权限):如果类里的一个成员（包括成员变量、方法、个构造器）
使用private访问修饰符来修饰，则这个成员只能在当前类的内部被访问。很显然，这个访问控制符用于修饰成员
变量最合适，使用它来修饰成员变量就可以把成员变量隐藏在该类的内部。

default（包访问权限）：如果类里的一个成员（包括成员变量、方法和构造器）或者
一个外部类不使用任何访问控制符修饰，就称它是包访问权限的，default访问控制
的成员或外部类可以被相同包下的其它类访问。

protected（子类访问权限）：如果一个成员（包括成员变量、方法、构造器等）protected访问控制符修饰，
那么这个成员既可以被同一个包中的其它类访问，也可以被不同包中的子类访问，
通常情况下，如果使用protected来修饰一个方法，通常是希望子类重写这个方法。

public（公共访问权限）：这是一个最宽松的访问控制级别。


4.Java常用包
Java核心类都在Java包以及其子包下，Java扩展的许多类都放在Javax包及其子包下。
java.lang:这个包下包含Java语言核心类，如String 、Math、String和Thread 等。
使用这个包下类无需要import语句导入，系统会自动导入这个包下的所有类。
java.util:Java大量工具类、接口和集合框架、接口。例如Arrays、List、Set
java.net:Java网络编程相关的类和接口。
java.io:Java输入、输出编程相关的类、接口。
java.text:Java格式化相关的类。
java.sql:Java进行JDBC数据库编程相关类、接口
java.awt:包含抽象窗口工具集（abstract window toolkits）的相关类和接口，主要用于构建图形
用户界面（GUI）程序。
java.swing:包含Swing图形用户界面编程的相关类、接口，这些类可以用于构建与平台无关的GUI程序。


5.多态
public class BaseClass {
	public int book = 6;

	public void base() {
		System.out.println("parent base()");
	}

	public void test() {
		System.out.println("parent test()");
	}
}

public class SubClass extends BaseClass {
	// 重新定义一个book实例变量隐藏父类book变量
	public String book = "书籍";

	public void test() {
		System.out.println("子类 test()");
	}

	public void sub() {
		System.out.println("子类普通方法");
	}

	public static void main(String[] args) {
		// 编译类型和运行类型一样，不存在多态
		BaseClass bc = new BaseClass();
		System.out.println(bc.book);
		// 下面两次调用BaseClass里方法
		bc.base();
		bc.test();

		// 编译类型和运行类型一样，不存在多态

		SubClass sc = new SubClass();
		System.out.println(sc.book);
		// 下面调用父类BaseClass里方法
		sc.base();
		// 下面调用当前类里方法
		sc.test();

		// 编译类型和运行类型不一样，多态发生
		BaseClass ployphics = new SubClass();
		// 输出6表明访问父类对象实例变量
		System.out.println(ployphics.book);
		// 下面调用父类BaseClass里方法
		ployphics.base();
		// 下面调用当前类里方法
		ployphics.test();
		// 编译类型为BaseClass例没有sub()方法
		// ployphics.sub();

	}

}
注意：通过引用变量来访问其包含的实例变量时，系统总是试图访问编译时类型所定义的成员变量，而不是它运行时类型所定义的成员变量。

