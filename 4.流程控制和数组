1.使用switch语句时，需要注意两个地方：第一是switch语句后的expression表达式的数据类型
只能是byte、short、char、int 四种整数类型，String(Java7)和枚举类型；第二个如果省略case后代码块的break,将引入一个陷进。

2.for
for (int j = 0; j < args.length; j++) {
			
		}
		
for(;;){
    syso("无限循环");
}
int count=0;
for(;count<10;){
   syso("data");
   count++;
}

3.Java提供continue和break来控制循环结构，除此之外，return可以结束整个方法，当然也就结束了一次循环。
break语句不仅可以结束其所在的循环，还可以直接结束其外层循环。此时需要在break后紧跟一个标签，这个
标签用于标示一个外层循环。
                oo:
		for (int i = 0; i < 10; i++) {
			for (int j = 0; j < 5; j++) {
				if (j == 1) {
					break oo;
				}
				System.out.println("j:" + j);

			}
			System.out.println("i:" + i);
		}
		
与break类似的是，continue后也可以紧跟一个标签，用于直接跳过标签所标识循环的当次循环的剩下语句，重新开始下一次循环。
oo:
		for (int i = 0; i < 10; i++) {
			for (int j = 0; j < 5; j++) {
				if (j == 1) {
					continue oo;
				}
				System.out.println("j:" + j);

			}
			System.out.println("i:" + i);
		}

4.数组--引用类型
一旦数组的初始化完成，数组在内存中所占的空间将被固定下来，因此数组的长度依然不变。即使把某个数组元素的数据清空，但它所占
的空间依然被保留，依然属于该数组，数组的长度依然不变。
数组的初始化
静态初始化 type[] arrayName=new type[]{element1,element2,element3};
动态初始化 type[] arrayName=new type[length];

5.多维数组
type[][]arrName=new type[length][];
这个二维数组实际上完全可以当成一维数组，使用new type[length]初始化一维数组后，相当于定义了length个type类型的变量。
类似的，使用new type[length][]初始化这个数组后，相当于定义了length个type[]类型的变量，当然这些type[]类型的变量都是数组类型，
因此必须再次初始化这些数组。

6.Java8增强的工具类Arrays
Arrays.binarySearch(type[] a,type key);
使用二分法查询key元素值在a数组中出现的索引；如果a数组不包含key元素值，则返回负数。
调用该方法要求数组中元素已经按升序排列，这样才能得到正确结果。
Arrays.binarySearch(type[]a,int fromIndex,int toIndex,type key);
只搜索a数组中fromIndex到toIndex索引的元素。调用该方法要求数组中元素已经按照升序排列
Arrays.copyOf(type[]original,int length);
这个方法将会把original数组复制成一个新数组，其中length是新数组的长度。
Arrays.copyOfRange(type[]original,int from,int to);
只复制original数组from索引到to索引的元素。
Arrays.equals(type[]a,type[]b);
如果数组a和b长度相等，并且a数组和b数组元素也一一相同，该方法返回true.
Arrays.fill(type[]a,type val);
该方法会把a数组的所有元素都赋值为val
Arrays.fill(type[]a,int formIndex,int toIndex,type val);
只是将a数组的fromIndex到toIndex索引的数组元素赋值为val
Arrays.sort(type[]a);
该方法对a数组元素进行排序
Arrays.sort(type[]a,int fromIndx ,int toIndex);
只是将fromIndex到toIndex索引的元素进行排序
Arrays.toString(type[]a);
将一个数组转化成一个字符串，多个元素使用英文,和空格隔开。
//////java8增强了Arrays类的功能，为Arrays类增加一些工具方法，这些工具方法充分利用
CPU并行的能力来提高设置、排序的性能。
Arrays.parallelPrefix(xxx[]array,XxxBinaryOperator op);
该方法使用op参数指定的计算公式计算得到的结果作为新的元素。op计算公式包括left/right两个形参，其中left代表数组中前一个
索引出的元素，right代表数组中当前索引处的元素，当计算第一个新新数组元素时，left值默认为1
Arrays.parallelPrefix(xxx[]array,int fromIndex,int toIndex,XxxBinaryOperator op);
int[] arrs = new int[] { 5, 1, 2, 3, 4 };
		Arrays.parallelPrefix(arrs, new IntBinaryOperator() {

			@Override
			public int applyAsInt(int left, int right) {
				return left * right;
			}
		});
[5, 5, 10, 30, 120]

Arrays.setAll(xxx[]array,IntToXxxxFunction generator);
该方法使用指定的生成器（generator）为所有数组元素设置值，该生成器控制数组元素的值的生成算法。
Arrays.parallelSetAll(xxx[]array,IntToXxxxFunction generator);
与上一个方法类似，只是该方法增加了并行能力，可以利用多CPU并行来提高性能。
int[] arrs = new int[] { 5, 1, 2, 3, 4 };
		Arrays.parallelSetAll(arrs, new IntUnaryOperator() {

			@Override
			public int applyAsInt(int operand) {
				return operand * 5;
			}
		});
		[0, 5, 10, 15, 20]
		
Arrays.parallelSort(xxxx[]a);
该方法与Arrays.sort()类似，只是增加了并行能力，利用多CPU并行提高性能。
Arrays.parallelSort(xxxx[]a,int formIndex,int toIndex);
Spliterator.OfXxx spliterator(xxx[]array);
该数组的所有元素转换成对应的Spliterator对象。
Spliterator.OfXxx spliterator(xxx[]array，int startInclusive,int endExclusive);
XxxStream stream(xxx[] array);
该方法将数组转换成Stream，Stream是Java8新增的流失编程API
XxxStream stream(xxx[] array，int startInclusive,int endExclusive);


7.数组例子

public class Num2Rmb {
	private String[] hanArr = new String[] { "零","壹", "贰", "叁", "肆", "伍", "陆", "柒",
			"捌", "玖" };
	private String[] unitArr = { "十", "百", "千", "万" };

	private String[] divide(double num) {
		long zheng = (long) num;
		long xiao = Math.round((num - zheng) * 100);
		return new String[] { zheng + "", String.valueOf(xiao) };
	}

	private String toHanStr(String numStr) {
		String result = "";
		int numLen = numStr.length();
		for (int i = 0; i < numLen; i++) {
			//把char型数字转换成int型数字，因为它们的ASCII码值恰好相差48
			//因此把char型数字减去48得到int型数字，例如'4'被转换成4
			//'a'97 'A'65
			int num = numStr.charAt(i) - 48;
			if (i != numLen - 1 && num != 0) {
				result += hanArr[num] + unitArr[numLen - 2 - i];
			} else {
				result += hanArr[num];
			}
		}

		return result;
	}

	public static void main(String[] args) {
		Num2Rmb nr = new Num2Rmb();
		System.out.println(Arrays.toString(nr.divide(234444.123)));
		System.out.println(nr.toHanStr("16109"));
	}

}
