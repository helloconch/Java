1.使用switch语句时，需要注意两个地方：第一是switch语句后的expression表达式的数据类型
只能是byte、short、char、int 四种整数类型，String(Java7)和枚举类型；第二个如果省略case后代码块的break,将引入一个陷进。

2.for
for (int j = 0; j < args.length; j++) {
			
		}
		
for(;;){
    syso("无限循环");
}
int count=0;
for(;count<10;){
   syso("data");
   count++;
}

3.Java提供continue和break来控制循环结构，除此之外，return可以结束整个方法，当然也就结束了一次循环。
break语句不仅可以结束其所在的循环，还可以直接结束其外层循环。此时需要在break后紧跟一个标签，这个
标签用于标示一个外层循环。
                oo:
		for (int i = 0; i < 10; i++) {
			for (int j = 0; j < 5; j++) {
				if (j == 1) {
					break oo;
				}
				System.out.println("j:" + j);

			}
			System.out.println("i:" + i);
		}
		
与break类似的是，continue后也可以紧跟一个标签，用于直接跳过标签所标识循环的当次循环的剩下语句，重新开始下一次循环。
oo:
		for (int i = 0; i < 10; i++) {
			for (int j = 0; j < 5; j++) {
				if (j == 1) {
					continue oo;
				}
				System.out.println("j:" + j);

			}
			System.out.println("i:" + i);
		}

4.数组--引用类型
一旦数组的初始化完成，数组在内存中所占的空间将被固定下来，因此数组的长度依然不变。即使把某个数组元素的数据清空，但它所占
的空间依然被保留，依然属于该数组，数组的长度依然不变。
数组的初始化
静态初始化 type[] arrayName=new type[]{element1,element2,element3};
动态初始化 type[] arrayName=new type[length];

5.多维数组
type[][]arrName=new type[length][];
这个二维数组实际上完全可以当成一维数组，使用new type[length]初始化一维数组后，相当于定义了length个type类型的变量。
类似的，使用new type[length][]初始化这个数组后，相当于定义了length个type[]类型的变量，当然这些type[]类型的变量都是数组类型，
因此必须再次初始化这些数组。
