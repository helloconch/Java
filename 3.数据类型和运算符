1.8个基本类型大致分为两类:
数值类型(整型byte（1个字节占8位） short（2个字节） int（4个字节） long（8个字节） 、字符型char（2个字节）、浮点型float(4个字节) double（8个字节）)，所有数值类型可以进行类型转换
布尔类型

2.java语言提供丰富的运算符，包括所有的算术运算符、位运算符、比较运算符、逻辑运算符。


3.文档注释
javadoc 选项  java源文件|包
如:javadoc -d apiDocc ./Desktop/xxx/*.java

4.Java中的整数值有4种表示方式：十进制、二进制、八进制、十六进制
二进制以0b或0B开头；
八进制以0开头；
十六进制以0x或者0X开头，其中10~15分别以a~f表示；
所有数字在计算机底层都是以二进制形式存在的，原码是直接将一个数值换算成
二进制数。但计算机以补码的形式保存所有的整数。
补码的计算规则：正数的补码和原码完全相同。负数的补码是其反码+1；反码是对原码
按位取反，只是最高位（符号位）保持不变。

5.字符型通常用于表示单个字符，字符型值必须使用单引号（''），java语音使用
Unicode字符集作为编码方式，而Unicode被设计成支持世界上所有书面语音的字符，
包括中文，因此Java程序支持各种语言的字符。
由于计算机底层保存字符时，实际是保存该字符对应的编号，因此char类型的值也可直接作为
整数值来使用，它相当于一个16位的无符号整数，表数范围0~65535
char类型的变量、值完全可以参加加、减、乘、除等数学运算，也可以比较大小，实际上都是用该字符对应的编码参与计算。


6.Java提供三个特殊的浮点数值：正无穷大、负无穷大、和非数，用于表示溢出和出错。
例如一个正数除以0将得到正无穷大(有一个是浮点数或两个都是浮点数)，负数除以0得到负无穷大(有一个是浮点数或两个都是浮点数)，
0.0除以0.0或对一个负数开方将得到一个非数。
正无穷大通过Double或Float类的POSITIVE_INFINITY表示。
负无穷大通过Double或Float类的NEGATIVE_INFINITY表示。
非数通过Double或Float的NaN表示。
必须指出的是，所有的正无穷大数值都是相等的，所有的负无穷大数值都是相等的。
而NaN不与任何数值相等，甚至和NaN都不相等。

7.位运算符
java支持位运算符有如下7个
& ：按位与。当两位同时为1时才返回1.
|：按位或。只要有1位为1即为1
~：按位非。单目运算符，将操作数的每个位（包括符号位）全部取反。
^：按位异或。当两位相同时返回0，不同时返回1
<<：左移运算符 将操作数的二进制左移指定位数，右边空出用0填充
>>：右移运算符 将操作数的二进制右移动指定位数，左边空出来的位以原来符号位填充。
即如果第一个操作数原来是正数，则左边补0，如果第一个操作数是负数，则左边补1
>>>：无符号右移运算符  将操作数的二进制右移动指定位数，左边空出来的总用0填充。

8.逻辑运算符
&&：与，前后两个操作数必须都是true，才返回true
&：不短路与，作用与&&相同，但不会短路，总是执行前后两个操作数
||：或，只要一个为true，则为true
|：不短路或，但不会短路,总是执行前后两个操作数
！：非
^：异或，当两个操作数不同时返回true,相同返回false
